#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void LOOK(vector<int>& requests, int head, bool direction) {
    int seek_count = 0;
    int distance, cur_track;
    vector<int> left, right, seek_sequence;

    for (int i = 0; i < requests.size(); i++) {
        if (requests[i] < head) {
            left.push_back(requests[i]);
        }
        if (requests[i] > head) {
            right.push_back(requests[i]);
        }
    }

    sort(left.begin(), left.end());
    sort(right.begin(), right.end());

    if (direction) {
        for (int i = 0; i < right.size(); i++) {
            cur_track = right[i];
            seek_sequence.push_back(cur_track);
            distance = abs(cur_track - head);
            seek_count += distance;
            head = cur_track;
        }
        for (int i = left.size() - 1; i >= 0; i--) {
            cur_track = left[i];
            seek_sequence.push_back(cur_track);
            distance = abs(cur_track - head);
            seek_count += distance;
            head = cur_track;
        }
    } else {
        for (int i = left.size() - 1; i >= 0; i--) {
            cur_track = left[i];
            seek_sequence.push_back(cur_track);
            distance = abs(cur_track - head);
            seek_count += distance;
            head = cur_track;
        }
        for (int i = 0; i < right.size(); i++) {
            cur_track = right[i];
            seek_sequence.push_back(cur_track);
            distance = abs(cur_track - head);
            seek_count += distance;
            head = cur_track;
        }
    }

    cout << "Total seek operations (LOOK): " << seek_count << endl;
    cout << "Seek Sequence (LOOK): ";
    for (int i = 0; i < seek_sequence.size(); i++) {
        cout << seek_sequence[i] << " ";
    }
    cout << endl;
}

int main() {
    vector<int> requests = {98, 183, 37, 122, 14, 124, 65, 67};
    int head = 53;
    bool direction = true; // true for left to right, false for right to left

    LOOK(requests, head, direction);

    return 0;
}
