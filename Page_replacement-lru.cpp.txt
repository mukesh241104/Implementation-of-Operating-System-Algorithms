#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>

using namespace std;

void lruPageReplacement(vector<int>& pages, int frame_size) {
    list<int> frames;
    unordered_map<int, list<int>::iterator> page_map;
    int page_faults = 0;

    for (int page : pages) {
        if (page_map.find(page) == page_map.end()) {
            page_faults++;
            if (frames.size() == frame_size) {
                int old_page = frames.back();
                frames.pop_back();
                page_map.erase(old_page);
            }
        } else {
            frames.erase(page_map[page]);
        }
        frames.push_front(page);
        page_map[page] = frames.begin();
    }

    cout << "Page Faults (LRU): " << page_faults << endl;
}

int main() {
    vector<int> pages = {1, 3, 0, 3, 5, 6, 3};
    int frame_size = 3;

    lruPageReplacement(pages, frame_size);

    return 0;
}
