#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>

using namespace std;

void optimalPageReplacement(vector<int>& pages, int frame_size) {
    unordered_set<int> frames;
    unordered_map<int, int> page_index_map;
    int page_faults = 0;

    for (int i = 0; i < pages.size(); i++) {
        if (frames.find(pages[i]) == frames.end()) {
            if (frames.size() < frame_size) {
                frames.insert(pages[i]);
            } else {
                int farthest = i + 1;
                int page_to_replace;
                for (auto frame : frames) {
                    int j;
                    for (j = i + 1; j < pages.size(); j++) {
                        if (pages[j] == frame) {
                            if (j > farthest) {
                                farthest = j;
                                page_to_replace = frame;
                            }
                            break;
                        }
                    }
                    if (j == pages.size()) {
                        page_to_replace = frame;
                        break;
                    }
                }
                frames.erase(page_to_replace);
                frames.insert(pages[i]);
            }
            page_faults++;
        }
        page_index_map[pages[i]] = i;
    }

    cout << "Page Faults (Optimal): " << page_faults << endl;
}

int main() {
    vector<int> pages = {1, 3, 0, 3, 5, 6, 3};
    int frame_size = 3;

    optimalPageReplacement(pages, frame_size);

    return 0;
}
