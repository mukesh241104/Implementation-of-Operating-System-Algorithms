#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Process {
public:
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int start_time;
    int finish_time;
    int waiting_time;
    int turnaround_time;

    Process(int i, int a, int b, int p) : id(i), arrival_time(a), burst_time(b), priority(p), start_time(0), finish_time(0), waiting_time(0), turnaround_time(0) {}
};

bool compareArrivalAndPriority(Process a, Process b) {
    if (a.arrival_time == b.arrival_time)
        return a.priority < b.priority;
    return a.arrival_time < b.arrival_time;
}

void priorityScheduling(vector<Process>& processes) {
    sort(processes.begin(), processes.end(), compareArrivalAndPriority);
    int current_time = 0;
    double total_waiting_time = 0;
    double total_turnaround_time = 0;
    int completed = 0;
    vector<Process> ready_queue;
    int process_index = 0;

    while (completed < processes.size()) {
        while (process_index < processes.size() && processes[process_index].arrival_time <= current_time) {
            ready_queue.push_back(processes[process_index]);
            process_index++;
        }

        if (!ready_queue.empty()) {
            sort(ready_queue.begin(), ready_queue.end(), [](Process a, Process b) { return a.priority < b.priority; });
            Process process = ready_queue.front();
            ready_queue.erase(ready_queue.begin());

            process.start_time = current_time;
            process.finish_time = current_time + process.burst_time;
            current_time += process.burst_time;
            process.waiting_time = process.start_time - process.arrival_time;
            process.turnaround_time = process.finish_time - process.arrival_time;
            total_waiting_time += process.waiting_time;
            total_turnaround_time += process.turnaround_time;
            processes[process.id - 1] = process; // Update the process in the original list
            completed++;
        } else {
            current_time++;
        }
    }

    double avg_waiting_time = total_waiting_time / processes.size();
    double avg_turnaround_time = total_turnaround_time / processes.size();

    cout << "Scheduled Processes (Priority):" << endl;
    for (const auto& process : processes) {
        cout << "Process ID: " << process.id
             << ", Arrival Time: " << process.arrival_time
             << ", Burst Time: " << process.burst_time
             << ", Priority: " << process.priority
             << ", Waiting Time: " << process.waiting_time
             << ", Turnaround Time: " << process.turnaround_time << endl;
    }
    cout << "Average Waiting Time: " << avg_waiting_time << endl;
    cout << "Average Turnaround Time: " << avg_turnaround_time << endl;
}

int main() {
    vector<Process> processes = {
        Process(1, 0, 4, 2),
        Process(2, 1, 3, 1),
        Process(3, 2, 1, 3),
        Process(4, 3, 2, 4)
    };

    priorityScheduling(processes);

    return 0;
}
