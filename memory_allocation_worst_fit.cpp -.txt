#include <iostream>
#include <vector>

using namespace std;

void worstFit(vector<int>& blockSizes, vector<int>& processSizes) {
    vector<int> allocation(processSizes.size(), -1);

    for (int i = 0; i < processSizes.size(); i++) {
        int worstIdx = -1;
        for (int j = 0; j < blockSizes.size(); j++) {
            if (blockSizes[j] >= processSizes[i]) {
                if (worstIdx == -1 || blockSizes[j] > blockSizes[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSizes[worstIdx] -= processSizes[i];
        }
    }

    cout << "Process No.\tProcess Size\tBlock No." << endl;
    for (int i = 0; i < processSizes.size(); i++) {
        cout << i + 1 << "\t\t" << processSizes[i] << "\t\t";
        if (allocation[i] != -1) {
            cout << allocation[i] + 1 << endl;
        } else {
            cout << "Not Allocated" << endl;
        }
    }
}

int main() {
    vector<int> blockSizes = {100, 500, 200, 300, 600};
    vector<int> processSizes = {212, 417, 112, 426};

    worstFit(blockSizes, processSizes);

    return 0;
}
